import sqlite3
import logging
from telebot import TeleBot, types
from telebot.handler_backends import State, StatesGroup
from telebot.storage import StateMemoryStorage
from dotenv import load_dotenv
import os

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —ñ–∑ .env
load_dotenv()
API_TOKEN = os.getenv('API_TOKEN')
ADMIN_IDS = list(map(int, os.getenv('ADMIN_IDS').split(',')))
DATABASE_NAME = os.getenv('DATABASE_NAME')

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ª–æ–≥–µ—Ä–∞
logging.basicConfig(filename='bot.log', level=logging.INFO)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é —Å—Ç–∞–Ω—ñ–≤
state_storage = StateMemoryStorage()
bot = TeleBot(API_TOKEN, state_storage=state_storage)

# –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Å—Ç–∞–Ω—ñ–≤
class OrderStatusStates(StatesGroup):
    select_order = State()
    new_status = State()

# –ö–ª–∞—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
class Database:
    def __init__(self, db_name):
        self.db_name = db_name
        self._init_tables()

    def _get_connection(self):
        """–°—Ç–≤–æ—Ä—é—î –Ω–æ–≤–µ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö."""
        return sqlite3.connect(self.db_name, check_same_thread=True)

    def _init_tables(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î —Ç–∞–±–ª–∏—Ü—ñ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö, —è–∫—â–æ –≤–æ–Ω–∏ —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω—ñ."""
        with self._get_connection() as conn:
            cursor = conn.cursor()
            # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—É —Ç–∞–±–ª–∏—Ü—é orders, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤
            cursor.execute('DROP TABLE IF EXISTS orders')
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS products (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT NOT NULL,
                    description TEXT,
                    price REAL NOT NULL
                )''')
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS orders (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER NOT NULL,
                    username TEXT,
                    product_id INTEGER NOT NULL,
                    status TEXT DEFAULT 'new'
                )''')
            conn.commit()

    def get_products(self):
        """–û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ —É—Å—ñ—Ö —Ç–æ–≤–∞—Ä—ñ–≤ —ñ–∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö."""
        with self._get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT * FROM products')
            return cursor.fetchall()

    def get_product(self, product_id):
        """–û—Ç—Ä–∏–º—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–æ–≤–∞—Ä –∑–∞ –π–æ–≥–æ ID."""
        with self._get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT * FROM products WHERE id = ?', (product_id,))
            return cursor.fetchone()

    def add_product(self, name, description, price):
        """–î–æ–¥–∞—î –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö."""
        with self._get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('INSERT INTO products (name, description, price) VALUES (?, ?, ?)',
                           (name, description, price))
            conn.commit()

    def add_order(self, user_id, username, product_id):
        """–î–æ–¥–∞—î –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö."""
        with self._get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('INSERT INTO orders (user_id, username, product_id) VALUES (?, ?, ?)',
                           (user_id, username if username else "–ù–µ–≤—ñ–¥–æ–º–∏–π", product_id))
            conn.commit()

    def get_user_orders(self, user_id):
        """–û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ –π–æ–≥–æ ID."""
        with self._get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT orders.id, products.name, orders.status 
                FROM orders 
                JOIN products ON orders.product_id = products.id 
                WHERE orders.user_id = ?
            ''', (user_id,))
            return cursor.fetchall()

    def get_all_orders(self):
        """–û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ —É—Å—ñ—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å."""
        try:
            with self._get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT orders.id, orders.user_id, orders.username, products.name, orders.status 
                    FROM orders 
                    JOIN products ON orders.product_id = products.id
                ''')
                return cursor.fetchall()
        except sqlite3.Error as e:
            logging.error(f"Error in get_all_orders: {e}")
            return []

    def update_order_status(self, order_id, new_status):
        """–û–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞ –π–æ–≥–æ ID."""
        with self._get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('UPDATE orders SET status = ? WHERE id = ?', (new_status, order_id))
            conn.commit()

    def get_order_user_id(self, order_id):
        """–û—Ç—Ä–∏–º—É—î ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–∏–π –∑—Ä–æ–±–∏–≤ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –∑–∞ ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è."""
        with self._get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT user_id FROM orders WHERE id = ?', (order_id,))
            result = cursor.fetchone()
            return result[0] if result else None

    def get_order_status(self, order_id):
        """–û—Ç—Ä–∏–º—É—î —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞ –π–æ–≥–æ ID."""
        with self._get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT status FROM orders WHERE id = ?', (order_id,))
            result = cursor.fetchone()
            return result[0] if result else None

    def delete_order(self, order_id):
        """–í–∏–¥–∞–ª—è—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞ –π–æ–≥–æ ID."""
        with self._get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('DELETE FROM orders WHERE id = ?', (order_id,))
            conn.commit()

# –ö–ª–∞—Å –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ª–æ–≥—ñ–∫–∏ –±–æ—Ç–∞
class BotHandler:
    def __init__(self, bot, admin_ids, db):
        self.bot = bot
        self.admin_ids = admin_ids
        self.db = db
        self.status_options = ['new', 'preparing', 'done']
        self.deal_of_the_day = "–°—å–æ–≥–æ–¥–Ω—ñ—à–Ω—è –∞–∫—Ü—ñ—è: –ö–∞–ø—É—á–∏–Ω–æ –∑—ñ –∑–Ω–∏–∂–∫–æ—é 20%! ‚òï"

    def get_main_keyboard(self, user_id):
        """–°—Ç–≤–æ—Ä—é—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –¥–æ–¥–∞—é—á–∏ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤."""
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add('üìñ –ú–µ–Ω—é', 'üõç –ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è')
        keyboard.add('üéÅ –ê–∫—Ü—ñ—è –¥–Ω—è', 'üìç –ù–∞—à—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏')
        if user_id in self.admin_ids:
            keyboard.add('üîß –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å')
        return keyboard

    def log_action(self, user_id, action):
        """–õ–æ–≥—É—î –¥—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
        logging.info(f"User {user_id} performed action: {action}")

    def start(self, message):
        """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /start, –≤—ñ—Ç–∞—é—á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
        user = message.from_user
        welcome_text = (
            f"–í—ñ—Ç–∞—î–º–æ, {user.first_name}!\n"
            "–¶–µ –±–æ—Ç –∫–∞–≤'—è—Ä–Ω—ñ 'Sliwka' ‚òï\n"
            "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
        )
        self.bot.send_message(message.chat.id, welcome_text, reply_markup=self.get_main_keyboard(user.id))
        self.log_action(user.id, 'start')

    def show_menu(self, message):
        """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é –∑ –¥–æ—Å—Ç—É–ø–Ω–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏."""
        products = self.db.get_products()
        if not products:
            # –î–æ–¥–∞—î–º–æ –±—ñ–ª—å—à–µ —Ç–æ–≤–∞—Ä—ñ–≤ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
            self.db.add_product("–ï—Å–ø—Ä–µ—Å–æ", "–ö–ª–∞—Å–∏—á–Ω–∞ –∫–∞–≤–∞", 40.0)
            self.db.add_product("–ö–∞–ø—É—á–∏–Ω–æ", "–ö–∞–≤–∞ –∑ –º–æ–ª–æ—á–Ω–æ—é –ø—ñ–Ω–∫–æ—é", 50.0)
            self.db.add_product("–õ–∞—Ç–µ", "–ö–∞–≤–∞ –∑ –º–æ–ª–æ–∫–æ–º", 55.0)
            self.db.add_product("–ê–º–µ—Ä–∏–∫–∞–Ω–æ", "–ö–∞–≤–∞ –∑ –≤–æ–¥–æ—é", 45.0)
            self.db.add_product("–ß–∞–π –∑–µ–ª–µ–Ω–∏–π", "–û—Å–≤—ñ–∂–∞—é—á–∏–π –∑–µ–ª–µ–Ω–∏–π —á–∞–π", 35.0)
            self.db.add_product("–ì–∞—Ä—è—á–∏–π —à–æ–∫–æ–ª–∞–¥", "–¢–µ–ø–ª–∏–π –Ω–∞–ø—ñ–π —ñ–∑ —à–æ–∫–æ–ª–∞–¥–æ–º", 60.0)
            self.db.add_product("–ö—Ä—É–∞—Å–∞–Ω –∑ —à–æ–∫–æ–ª–∞–¥–æ–º", "–°–≤—ñ–∂–∏–π –∫—Ä—É–∞—Å–∞–Ω", 35.0)
            self.db.add_product("–ö—Ä—É–∞—Å–∞–Ω —ñ–∑ —Å–∏—Ä–æ–º", "–°–≤—ñ–∂–∏–π –∫—Ä—É–∞—Å–∞–Ω —ñ–∑ —Å–∏—Ä–æ–º", 40.0)
            self.db.add_product("–ö—Ä—É–∞—Å–∞–Ω —ñ–∑ –º–∏–≥–¥–∞–ª–µ–º", "–°–≤—ñ–∂–∏–π –∫—Ä—É–∞—Å–∞–Ω —ñ–∑ –º–∏–≥–¥–∞–ª–µ–≤–æ—é –Ω–∞—á–∏–Ω–∫–æ—é", 45.0)
            self.db.add_product("–¢—ñ—Å—Ç–µ—á–∫–æ '–ú–∞–∫–∞—Ä–æ–Ω'", "–°–º–∞–∫–æ–ª–∏–∫ —ñ–∑ –º–∏–≥–¥–∞–ª–µ–≤–æ–≥–æ –±–æ—Ä–æ—à–Ω–∞", 25.0)
            self.db.add_product("–¢—ñ—Å—Ç–µ—á–∫–æ '–ù–∞–ø–æ–ª–µ–æ–Ω'", "–ö–ª–∞—Å–∏—á–Ω–∏–π –¥–µ—Å–µ—Ä—Ç", 60.0)
            self.db.add_product("–ß—ñ–∑–∫–µ–π–∫", "–ù—ñ–∂–Ω–∏–π —á—ñ–∑–∫–µ–π–∫ —ñ–∑ —è–≥–æ–¥–∞–º–∏", 70.0)
            self.db.add_product("–°–º—É–∑—ñ –º–∞–Ω–≥–æ", "–û—Å–≤—ñ–∂–∞—é—á–∏–π –Ω–∞–ø—ñ–π", 70.0)
            self.db.add_product("–õ–∏–º–æ–Ω–∞–¥", "–û—Å–≤—ñ–∂–∞—é—á–∏–π –ª–∏–º–æ–Ω–Ω–∏–π –Ω–∞–ø—ñ–π", 50.0)
            products = self.db.get_products()
        
        markup = types.InlineKeyboardMarkup()
        for product in products:
            markup.add(types.InlineKeyboardButton(
                text=f"{product[1]} - {product[3]}‚Ç¥",
                callback_data=f"product_{product[0]}"
            ))
        self.bot.send_message(message.chat.id, "–ù–∞—à–µ –º–µ–Ω—é:", reply_markup=markup)

    def product_details(self, call):
        """–ü–æ–∫–∞–∑—É—î –¥–µ—Ç–∞–ª—ñ —Ç–æ–≤–∞—Ä—É –ø—ñ—Å–ª—è –≤–∏–±–æ—Ä—É –∑ –º–µ–Ω—é."""
        product_id = call.data.split('_')[1]
        product = self.db.get_product(product_id)
        if product:
            text = (
                f"‚òï {product[1]}\n\n"
                f"{product[2]}\n\n"
                f"–¶—ñ–Ω–∞: {product[3]}‚Ç¥"
            )
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton(
                "–ó–∞–º–æ–≤–∏—Ç–∏ üõí", callback_data=f"order_{product_id}"
            ))
            self.bot.edit_message_text(
                text, call.message.chat.id, call.message.message_id, reply_markup=markup
            )

    def process_order(self, call):
        """–û–±—Ä–æ–±–ª—è—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
        try:
            product_id = int(call.data.split('_')[1])  # –ü–µ—Ä–µ–∫–æ–Ω–∞—î–º–æ—Å—è, —â–æ product_id —î —á–∏—Å–ª–æ–º
            user_id = call.from_user.id
            username = call.from_user.username if call.from_user.username else call.from_user.first_name
            product = self.db.get_product(product_id)
            if not product:
                raise ValueError(f"–¢–æ–≤–∞—Ä –∑ ID {product_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            
            self.db.add_order(user_id, username, product_id)
            admin_text = (
                "–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!\n"
                f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: @{username}\n"
                f"–¢–æ–≤–∞—Ä: {product[1]}\n"
                f"–¶—ñ–Ω–∞: {product[3]}‚Ç¥"
            )
            for admin in self.admin_ids:
                self.bot.send_message(admin, admin_text)
            self.bot.answer_callback_query(call.id, "–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ! ‚úÖ")
            self.log_action(user_id, f"Ordered product ID {product_id}")
        except (sqlite3.Error, ValueError) as e:
            logging.error(f"Order error: {e}")
            self.bot.answer_callback_query(call.id, f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {str(e)}")

    def show_user_orders(self, message):
        """–ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è."""
        user_id = message.from_user.id
        orders = self.db.get_user_orders(user_id)
        if not orders:
            self.bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å.")
            return
        
        text = "üìã –í–∞—à—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n\n"
        markup = types.InlineKeyboardMarkup()
        for order in orders:
            order_id, name, status = order
            text += f"#{order_id} | {name} | –°—Ç–∞—Ç—É—Å: {status}\n"
            if status == 'new':
                markup.add(types.InlineKeyboardButton(
                    f"–°–∫–∞—Å—É–≤–∞—Ç–∏ #{order_id}", callback_data=f"cancel_order_{order_id}"
                ))
        self.bot.send_message(message.chat.id, text, reply_markup=markup)

    def cancel_order(self, call):
        """–°–∫–∞—Å–æ–≤—É—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, —è–∫—â–æ –π–æ–≥–æ —Å—Ç–∞—Ç—É—Å 'new'."""
        order_id = call.data.split('_')[2]
        user_id = call.from_user.id
        status = self.db.get_order_status(order_id)
        
        if status != 'new':
            self.bot.answer_callback_query(call.id, "–°–∫–∞—Å—É–≤–∞—Ç–∏ –º–æ–∂–Ω–∞ –ª–∏—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º 'new'!")
            return
        
        order_user_id = self.db.get_order_user_id(order_id)
        if order_user_id != user_id:
            self.bot.answer_callback_query(call.id, "–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ —á—É–∂–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!")
            return
        
        self.db.delete_order(order_id)
        self.bot.answer_callback_query(call.id, f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} —Å–∫–∞—Å–æ–≤–∞–Ω–æ! üóëÔ∏è")
        self.log_action(user_id, f"Canceled order #{order_id}")

    def show_deal_of_the_day(self, message):
        """–ü–æ–∫–∞–∑—É—î –∞–∫—Ü—ñ—é –¥–Ω—è."""
        self.bot.send_message(message.chat.id, self.deal_of_the_day)

    def show_contacts(self, message):
        """–ü–æ–∫–∞–∑—É—î –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∫–∞–≤'—è—Ä–Ω—ñ."""
        contacts = (
            "üìç –ù–∞—à—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏:\n"
            "–ê–¥—Ä–µ—Å–∞: –≤—É–ª. –ö–∞–≤–æ–≤–∞, 1, –º. –ö–∏—ó–≤\n"
            "–ì—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏: –ü–Ω-–ù–¥, 8:00-20:00\n"
            "–¢–µ–ª–µ—Ñ–æ–Ω: +380 123 456 789\n"
            "–°–ª—ñ–¥–∫—É–π—Ç–µ –∑–∞ –Ω–∞–º–∏ –≤ Instagram: @sliwka_coffee"
        )
        self.bot.send_message(message.chat.id, contacts)

    def admin_panel(self, message):
        """–í—ñ–¥–∫—Ä–∏–≤–∞—î –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤."""
        if message.from_user.id not in self.admin_ids:
            self.bot.reply_to(message, "–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ ‚õî")
            return
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è üì¶', '–ó–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è üîÑ')
        markup.add('–ù–∞–∑–∞–¥ ‚óÄÔ∏è')
        self.bot.send_message(message.chat.id, "–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=markup)

    def back_to_main_menu(self, message):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
        self.bot.send_message(message.chat.id, "–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é:", reply_markup=self.get_main_keyboard(message.from_user.id))

    def show_all_orders(self, message):
        """–ü–æ–∫–∞–∑—É—î –≤—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
        if message.from_user.id not in self.admin_ids:
            self.bot.reply_to(message, "–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ ‚õî")
            return
        orders = self.db.get_all_orders()
        if not orders:
            self.bot.send_message(message.chat.id, "–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å.")
            return
        text = "üìã –£—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n\n"
        for order in orders:
            order_id, user_id, username, product_name, status = order
            display_name = f"@{username}" if username and username != "–ù–µ–≤—ñ–¥–æ–º–∏–π" else f"ID: {user_id}"
            text += f"#{order_id} | –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {display_name} | {product_name} | –°—Ç–∞—Ç—É—Å: {status}\n"
        self.bot.send_message(message.chat.id, text)

    def change_order_status_start(self, message):
        """–ü–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è."""
        if message.from_user.id not in self.admin_ids:
            self.bot.reply_to(message, "–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ ‚õî")
            return
        orders = self.db.get_all_orders()
        if not orders:
            self.bot.send_message(message.chat.id, "–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å.")
            return
        markup = types.InlineKeyboardMarkup()
        for order in orders:
            markup.add(types.InlineKeyboardButton(
                f"#{order[0]} | {order[3]} | –°—Ç–∞—Ç—É—Å: {order[4]}",
                callback_data=f"change_status_{order[0]}"
            ))
        self.bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É:", reply_markup=markup)

    def select_order_status(self, call):
        """–î–æ–∑–≤–æ–ª—è—î –æ–±—Ä–∞—Ç–∏ –Ω–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è."""
        order_id = call.data.split('_')[2]
        markup = types.InlineKeyboardMarkup()
        for status in self.status_options:
            markup.add(types.InlineKeyboardButton(status.capitalize(), callback_data=f"set_status_{order_id}_{status}"))
        self.bot.edit_message_text(
            "–û–±–µ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å:", call.message.chat.id, call.message.message_id, reply_markup=markup
        )

    def set_order_status(self, call):
        """–û–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ —Å–ø–æ–≤—ñ—â–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
        order_id = call.data.split('_')[2]
        new_status = call.data.split('_')[3]
        self.db.update_order_status(order_id, new_status)
        user_id = self.db.get_order_user_id(order_id)
        if user_id:
            self.bot.send_message(user_id, f"–°—Ç–∞—Ç—É—Å –≤–∞—à–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {new_status.capitalize()}")
        self.bot.answer_callback_query(call.id, "–°—Ç–∞—Ç—É—Å –æ–Ω–æ–≤–ª–µ–Ω–æ!")
        self.log_action(call.from_user.id, f"Changed order #{order_id} status to {new_status}")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –æ–±'—î–∫—Ç—ñ–≤
db = Database(DATABASE_NAME)
handler = BotHandler(bot, ADMIN_IDS, db)

# –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
bot.message_handler(commands=['start'])(handler.start)
bot.message_handler(func=lambda msg: msg.text == 'üìñ –ú–µ–Ω—é')(handler.show_menu)
bot.message_handler(func=lambda msg: msg.text == 'üõç –ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è')(handler.show_user_orders)
bot.message_handler(func=lambda msg: msg.text == 'üéÅ –ê–∫—Ü—ñ—è –¥–Ω—è')(handler.show_deal_of_the_day)
bot.message_handler(func=lambda msg: msg.text == 'üìç –ù–∞—à—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏')(handler.show_contacts)
bot.callback_query_handler(func=lambda call: call.data.startswith('product_'))(handler.product_details)
bot.callback_query_handler(func=lambda call: call.data.startswith('order_'))(handler.process_order)
bot.callback_query_handler(func=lambda call: call.data.startswith('cancel_order_'))(handler.cancel_order)
bot.message_handler(commands=['admin'])(handler.admin_panel)
bot.message_handler(func=lambda msg: msg.text == 'üîß –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å')(handler.admin_panel)
bot.message_handler(func=lambda msg: msg.text == '–ù–∞–∑–∞–¥ ‚óÄÔ∏è')(handler.back_to_main_menu)
bot.message_handler(func=lambda msg: msg.text == '–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è üì¶')(handler.show_all_orders)
bot.message_handler(func=lambda msg: msg.text == '–ó–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è üîÑ')(handler.change_order_status_start)
bot.callback_query_handler(func=lambda call: call.data.startswith('change_status_'))(handler.select_order_status)
bot.callback_query_handler(func=lambda call: call.data.startswith('set_status_'))(handler.set_order_status)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π...")
    bot.polling(none_stop=True)