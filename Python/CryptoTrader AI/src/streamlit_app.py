import streamlit as st
import pandas as pd
import sqlite3
import os
import numpy as np
import torch
import torch.nn.functional as F
import json
from train_model import PriceTransformer, FEATURES, preprocess, DEVICE
from web_socket import start_websocket
from config import SYMBOLS, TIMEFRAMES, DB_PATH, MODEL_DIR, TABLE_TEMPLATE, SEQUENCE_LENGTH
from datetime import datetime
import asyncio
import threading

# –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è —Å–≤—ñ—á–æ–∫
latest_candles = {sym: None for sym in SYMBOLS}
# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –±—É—Ñ–µ—Ä
sequence_buffers = {sym: [] for sym in SYMBOLS}

def candle_callback(candle, symbol):
    global sequence_buffers
    sequence_buffers[symbol].append(candle)
    if len(sequence_buffers[symbol]) > SEQUENCE_LENGTH:
        sequence_buffers[symbol].pop(0)

@st.cache_data
def load_features(sym, tf):
    conn = sqlite3.connect(DB_PATH)
    tbl = TABLE_TEMPLATE.format(symbol=sym.replace('/', '_'), timeframe=tf)
    df = pd.read_sql(f"SELECT * FROM {tbl}", conn, parse_dates=['timestamp'], index_col='timestamp')
    conn.close()
    return df.dropna()

@st.cache_resource
def load_model(sym):
    model_path = os.path.join(MODEL_DIR, f"full_model_{sym.replace('/', '_')}.pth")
    if not os.path.exists(model_path):
        st.error(f"–ú–æ–¥–µ–ª—å –¥–ª—è {sym} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return None
    checkpoint = torch.load(model_path, map_location=DEVICE)
    model = PriceTransformer(input_size=len(checkpoint['features'])).to(DEVICE)
    model.load_state_dict(checkpoint['model_state'])
    model.eval()
    return model, checkpoint['scaler'], checkpoint['features']

# –ó–∞–ø—É—Å–∫ WebSocket –¥–ª—è –≤—Å—ñ—Ö —Å–∏–º–≤–æ–ª—ñ–≤
for sym in SYMBOLS:
    start_websocket(sym.replace('/', '').lower(), lambda candle: candle_callback(candle, sym))

st.title("üìà CryptoTrader AI")
st.write("–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —É —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ")

# –í–∏–±—ñ—Ä –ø–∞—Ä–∏ —Ç–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º—É
sym = st.selectbox("–ü–∞—Ä–∞", SYMBOLS)
tf = st.selectbox("–¢–∞–π–º—Ñ—Ä–µ–π–º", TIMEFRAMES)

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—É
if st.button("–û–Ω–æ–≤–∏—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑"):
    if len(sequence_buffers[sym]) == SEQUENCE_LENGTH:
        data = pd.DataFrame(sequence_buffers[sym])
        data['timestamp'] = pd.to_datetime(data['timestamp'], unit='ms')
        data.set_index('timestamp', inplace=True)
        model, scaler, features = load_model(sym)
        if model is None:
            st.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –º–æ–¥–µ–ª—å!")
        else:
            input_data = preprocess(data, scaler, features)
            if input_data is None:
                st.error("–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö!")
            else:
                input_data = input_data.to(DEVICE)
                with torch.no_grad():
                    output = model(input_data)
                    probabilities = F.softmax(output, dim=1)[0].cpu().numpy()
                    prediction = np.argmax(probabilities)
                    signal = ['–ü–†–û–î–ê–ñ üî¥', '–£–¢–†–ò–ú–ê–ù–ù–Ø ‚ö™', '–ü–û–ö–£–ü–ö–ê üü¢'][prediction]
                    confidence = probabilities[prediction]
                    st.subheader("üß† –ü—Ä–æ–≥–Ω–æ–∑ –º–æ–¥–µ–ª—ñ:")
                    st.write(f"**–°–∏–≥–Ω–∞–ª**: {signal}")
                    st.write(f"**–í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å**: {confidence:.2%}")
    else:
        st.warning(f"–û—á—ñ–∫—É–≤–∞–Ω–Ω—è –¥–æ—Å—Ç–∞—Ç–Ω—å–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Å–≤—ñ—á–æ–∫: {len(sequence_buffers[sym])}/{SEQUENCE_LENGTH}")

# –ó–≤—ñ—Ç –ø—Ä–æ –º–æ–¥–µ–ª—å
if st.button("–ó–≤—ñ—Ç"):
    for f in ['loss', 'acc', 'cm']:
        img_path = os.path.join(MODEL_DIR, f"{sym.replace('/', '_')}_{f}.png")
        if os.path.exists(img_path):
            st.image(img_path, caption=f"–ì—Ä–∞—Ñ—ñ–∫ {f}")
        else:
            st.warning(f"–ì—Ä–∞—Ñ—ñ–∫ {f} –¥–ª—è {sym} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")

# –°–∞–π–¥–±–∞—Ä –¥–ª—è –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
st.sidebar.header("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
min_confidence = st.sidebar.slider("–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å —Å–∏–≥–Ω–∞–ª—É", 0.0, 1.0, 0.7)
min_volume = st.sidebar.slider("–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –æ–±—Å—è–≥", 0.0, 1.0, 0.0)

# –õ–æ–≥—É–≤–∞–Ω–Ω—è –º–µ—Ç—Ä–∏–∫
st.sidebar.subheader("–ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª—ñ")
metrics_path = os.path.join(MODEL_DIR, f"best_metrics_{sym.replace('/', '_')}.json")
if os.path.exists(metrics_path):
    with open(metrics_path, 'r') as f:
        metrics = json.load(f)
    st.sidebar.write(f"Sharpe Ratio: {metrics.get('sharpe', 0):.4f}")
    st.sidebar.write(f"F1 Score: {metrics.get('f1', 0):.4f}")
else:
    st.sidebar.warning("–ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")